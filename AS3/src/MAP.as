package  {		import flash.display.MovieClip;	import flash.media.Sound;			public class MAP extends MovieClip {		private var triggers:Object;		private var pieces:Object;				private var heartbeat:Sound;		private var heartbeatPlaying:Boolean = false;				private var boundsCount:int = 29;				public function MAP() {			// constructor code		}				public function initTraps():void {			heartbeat = new Sound_Heartbeat();			triggers = {				'butterflies': {					'trap': trap_butterfly_clip,					'trigger': trapTrigger_butterflies,					'once': false,					'framesAgo': 0				},				'leftHand_pinkie': {					'trap': trap_leftHand_pinkieClip,					'trigger': trapTrigger_leftHand_pinkieClip,					'once': false,					'framesAgo': 0				},				'leftHand_ring': {					'trap': trap_leftHand_ringClip,					'trigger': trapTrigger_leftHand_ring,					'once': false,					'framesAgo': 0				},				'leftHand_middle': {					'trap': trap_leftHand_middleClip,					'trigger': trapTrigger_leftHand_middle,					'once': false,					'framesAgo': 0				},				'leftHand_index': {					'trap': trap_leftHand_indexClip,					'trigger': trapTrigger_leftHand_index,					'once': false,					'framesAgo': 0				},				'leftHand_thumb': {					'trap': trap_leftHand_thumbClip,					'trigger': trapTrigger_leftHand_thumb,					'once': false,					'framesAgo': 0				},				'avalanche': {					'trap': trap_avalanche,					'trigger': trapTrigger_avalanche,					'heartbeat': true,					'once': false,					'framesAgo': 0				}			};		}				public function initPieces():void {			//var txt_legs:MovieClip = new txt_legs();						pieces = {				'lips': {					'trigger': pieceTrigger_lips,					'name': 'lips'				},				'brain': {					'trigger': pieceTrigger_brain,					'transition': transition_brain,					'name': 'brain'				},				'ear_left': {					'trigger': pieceTrigger_ear_left,					'transition': transition_ear,					'position': {						'x': -941,						'y': -351.3					},					'name': 'ears'				},				'ear_right': {					'trigger': pieceTrigger_ear_right,					'transition': transition_ear,					'position': {						'x': -941,						'y': -351.3					},					'name': 'ears'				},				'leg_left': {					'trigger': pieceTrigger_leg_left,					'title': txt_legs,					//'transition': pieceTransition_legs,					'name': 'legs'				},				'leg_right': {					'trigger': pieceTrigger_leg_right,					//'title': txt_legs,					//'transition': pieceTransition_legs,					'name': 'legs'				}			};		}				public function triggerTraps(blobby_x:int, blobby_y:int):void {			for each (var trigger:Object in triggers) 			{ 				if(trigger["trap"].currentLabel != "ANIM" && (!trigger["once"] || trigger["framesAgo"] > 24) && trigger["trigger"].hitTestPoint(blobby_x, blobby_y, false)) {					trigger["trap"].visible = true;					trigger["trap"].gotoAndPlay("ANIM");					trigger["framesAgo"] = 0;					trigger["once"] = true;										if(trigger.hasOwnProperty("heartbeat") && trigger["heartbeat"] && !heartbeatPlaying) {						heartbeat.play(0,1);						heartbeatPlaying = true;					}					else if(!trigger.hasOwnProperty("heartbeat") || !trigger["heartbeat"]) {						heartbeatPlaying = false;					}				}				else {					trigger["framesAgo"] += 1;				}			} 		}				public function highlightPieces(blobby_x:int, blobby_y:int):Object {			var highlighted:Object;						for each (var piece:Object in pieces) 			{ 				if(piece["trigger"].hitTestPoint(blobby_x, blobby_y, false)) {					highlighted = piece;				}			}						return highlighted;		}				public function isWithinBounds(blobby_x:int, blobby_y:int):Boolean {			var i:int;			var boundsHit:int = 0;						for (i = 1; i<=boundsCount; i++) 			{     			if(boundsHit >= 4) {					break;				}								if(!this.hasOwnProperty('BG_Bounds_' + i)) {					continue;				}								if(this['BG_Bounds_' + i].hitTestPoint(blobby_x, blobby_y, false)) {					boundsHit++;				}			}						/*while(count <= boundsCount) {				if(boundsHit >= 4) {					break;				}								if(!stage.hasOwnProperty('BG_Bounds_' + count)) {					continue;				}								if(stage['BG_Bounds_' + count].hitTestPoint(blobby_x, blobby_y, false)) {					boundsHit++;				}								count++;			}*/						return boundsHit > 0;		}	}	}